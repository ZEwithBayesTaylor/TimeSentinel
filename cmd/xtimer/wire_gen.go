// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/BitofferHub/xtimer/internal/biz"
	"github.com/BitofferHub/xtimer/internal/conf"
	"github.com/BitofferHub/xtimer/internal/data"
	"github.com/BitofferHub/xtimer/internal/interfaces"
	"github.com/BitofferHub/xtimer/internal/server"
	"github.com/BitofferHub/xtimer/internal/service"
	"github.com/BitofferHub/xtimer/internal/task"
	"github.com/go-kratos/kratos/v2"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp
//
//	@Author <a href="https://bitoffer.cn">狂飙训练营</a>
//	@Description: wireApp init kratos application.
//	@param *conf.Server
//	@param *conf.Data
//	@return *kratos.App
//	@return func()
//	@return error
func wireApp(confServer *conf.Server, confData *conf.Data) (*kratos.App, func(), error) {
	db := data.NewDatabase(confData)
	client := data.NewCache(confData)
	dataData := data.NewData(db, client)
	timerRepo := data.NewXtimerRepo(dataData)
	timerTaskRepo := data.NewTimerTaskRepo(dataData)
	taskCache := data.NewTaskCache(confData,dataData)
	transaction := data.NewTransaction(dataData)
	httpClient := biz.NewHttpClient()
	// UseCase
	migratorUseCase := biz.NewMigratorUseCase(confData,timerRepo, timerTaskRepo,taskCache)
	xtimerUseCase := biz.NewXtimerUseCase(confData,timerRepo,timerTaskRepo,taskCache,transaction,migratorUseCase)
	executorUseCase := biz.NewExecutorUseCase(confData,timerRepo,timerTaskRepo,taskCache,httpClient)
	triggerUseCase := biz.NewTriggerUseCase(confData,timerRepo,timerTaskRepo,taskCache,executorUseCase)
	schedulerUseCase := biz.NewSchedulerUseCase(confData,timerRepo,timerTaskRepo,taskCache,triggerUseCase)

	//service
	xtimerService := service.NewXTimerService(xtimerUseCase,schedulerUseCase,migratorUseCase)

	// server
	grpcServer := server.NewGRPCServer(confServer, xtimerService)
	handler := interfaces.NewHandler(xtimerService)
	httpServer := server.NewHTTPServer(confServer, handler)
	taskServer := task.NewTaskServer(confServer,xtimerService)

	//app
	app := newApp(grpcServer, httpServer, taskServer)
	return app, func() {
	}, nil
}
